// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var wkyApiGetUsbInfoResultModel = WkyApiGetUsbInfoResultModel.FromJson(jsonString);

namespace WkyApiSharp.Service.Model.GetUsbInfo
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class WkyApiGetUsbInfoResultModel
    {
        [JsonProperty("msg")]
        public string Msg { get; set; }

        [JsonProperty("result")]
        public ResultElement[] Result { get; set; }

        [JsonProperty("rtn")]
        public long Rtn { get; set; }
    }

    public partial class ResultClass
    {
        [JsonProperty("partitions")]
        public Partition[] Partitions { get; set; }
    }

    public partial class Partition
    {
        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("part_symbol")]
        public string PartSymbol { get; set; }

        [JsonProperty("disk_sn")]
        public long DiskSn { get; set; }

        [JsonProperty("uuid")]
        public string Uuid { get; set; }

        [JsonProperty("used")]
        public string Used { get; set; }

        [JsonProperty("unique")]
        public long Unique { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }

        [JsonProperty("part_label")]
        public string PartLabel { get; set; }

        [JsonProperty("capacity")]
        public string Capacity { get; set; }

        [JsonProperty("disk_id")]
        public long DiskId { get; set; }

        [JsonProperty("fs_type")]
        public string FsType { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial struct ResultElement
    {
        public long? Integer;
        public ResultClass ResultClass;

        public static implicit operator ResultElement(long Integer) => new ResultElement { Integer = Integer };
        public static implicit operator ResultElement(ResultClass ResultClass) => new ResultElement { ResultClass = ResultClass };
    }

    public partial class WkyApiGetUsbInfoResultModel
    {
        public static WkyApiGetUsbInfoResultModel FromJson(string json) => JsonConvert.DeserializeObject<WkyApiGetUsbInfoResultModel>(json, WkyApiSharp.Service.Model.GetUsbInfo.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this WkyApiGetUsbInfoResultModel self) => JsonConvert.SerializeObject(self, WkyApiSharp.Service.Model.GetUsbInfo.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ResultElementConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ResultElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ResultElement) || t == typeof(ResultElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new ResultElement { Integer = integerValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<ResultClass>(reader);
                    return new ResultElement { ResultClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type ResultElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ResultElement)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.ResultClass != null)
            {
                serializer.Serialize(writer, value.ResultClass);
                return;
            }
            throw new Exception("Cannot marshal type ResultElement");
        }

        public static readonly ResultElementConverter Singleton = new ResultElementConverter();
    }
}
