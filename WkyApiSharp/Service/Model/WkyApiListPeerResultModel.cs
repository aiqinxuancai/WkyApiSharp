// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var wkyApiListPeerResultModel = WkyApiListPeerResultModel.FromJson(jsonString);

namespace WkyApiSharp.Service.Model.ListPeer
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class WkyApiListPeerResultModel
    {
        [JsonProperty("result")]
        public ResultElement[] Result { get; set; }

        [JsonProperty("rtn")]
        public long Rtn { get; set; }

        [JsonProperty("msg")]
        public string Msg { get; set; }
    }

    public partial class Peer
    {
        [JsonProperty("global_appearance")]
        public long GlobalAppearance { get; set; }

        [JsonProperty("devices")]
        public Device[] Devices { get; set; }
    }

    public partial class Device
    {
        [JsonProperty("imported")]
        public long Imported { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("features")]
        public Features Features { get; set; }

        [JsonProperty("ban_flag")]
        public BanFlag BanFlag { get; set; }

        [JsonProperty("exception_message")]
        public string ExceptionMessage { get; set; }

        [JsonProperty("short_device_id")]
        public string ShortDeviceId { get; set; }

        [JsonProperty("lan_ip")]
        public string LanIp { get; set; }

        [JsonProperty("selltag")]
        public string Selltag { get; set; }

        [JsonProperty("account_type")]
        public string AccountType { get; set; }

        [JsonProperty("account_name")]
        public string AccountName { get; set; }

        [JsonProperty("peerid")]
        public string Peerid { get; set; }

        [JsonProperty("metadata")]
        public BanFlag Metadata { get; set; }

        [JsonProperty("disconnect_time")]
        public long DisconnectTime { get; set; }

        [JsonProperty("device_sn")]
        public string DeviceSn { get; set; }

        [JsonProperty("product_id")]
        public long ProductId { get; set; }

        [JsonProperty("system_name")]
        public string SystemName { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("lan_ipv6")]
        public string LanIpv6 { get; set; }

        [JsonProperty("exception_name")]
        public string ExceptionName { get; set; }

        [JsonProperty("area_code")]
        public string AreaCode { get; set; }

        [JsonProperty("ip")]
        public string Ip { get; set; }

        [JsonProperty("direct_lvm")]
        public long DirectLvm { get; set; }

        [JsonProperty("coturn_online")]
        public long CoturnOnline { get; set; }

        [JsonProperty("upgradeable")]
        public bool Upgradeable { get; set; }

        [JsonProperty("sell_limit")]
        public string SellLimit { get; set; }

        [JsonProperty("licence")]
        public string Licence { get; set; }

        [JsonProperty("system_version")]
        public string SystemVersion { get; set; }

        [JsonProperty("device_name")]
        public string DeviceName { get; set; }

        [JsonProperty("is_exp")]
        public bool IsExp { get; set; }

        [JsonProperty("device_type")]
        public string DeviceType { get; set; }

        [JsonProperty("device_id")]
        public string DeviceId { get; set; }

        [JsonProperty("connect_time")]
        public long ConnectTime { get; set; }

        [JsonProperty("account_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long AccountId { get; set; }

        [JsonProperty("mac_address")]
        public string MacAddress { get; set; }

        [JsonProperty("ip_info")]
        public IpInfo IpInfo { get; set; }

        [JsonProperty("broker_id")]
        public long BrokerId { get; set; }

        [JsonProperty("first_bind")]
        public long FirstBind { get; set; }

        [JsonProperty("last_update_time")]
        public long LastUpdateTime { get; set; }

        [JsonProperty("hardware_model")]
        public string HardwareModel { get; set; }

        [JsonProperty("bind_time")]
        public long BindTime { get; set; }
    }

    public partial class BanFlag
    {
    }

    public partial class Features
    {
        [JsonProperty("miner")]
        public long Miner { get; set; }

        [JsonProperty("cash")]
        public long Cash { get; set; }

        [JsonProperty("onecloud_coin")]
        public long OnecloudCoin { get; set; }
    }

    public partial class IpInfo
    {
        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("isp")]
        public string Isp { get; set; }

        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("province")]
        public string Province { get; set; }
    }

    public partial struct ResultElement
    {
        public long? Integer;
        public Peer Peer;

        public static implicit operator ResultElement(long Integer) => new ResultElement { Integer = Integer };
        public static implicit operator ResultElement(Peer ResultClass) => new ResultElement { Peer = ResultClass };
    }

    public partial class WkyApiListPeerResultModel
    {
        public static WkyApiListPeerResultModel FromJson(string json) => JsonConvert.DeserializeObject<WkyApiListPeerResultModel>(json, WkyApiSharp.Service.Model.ListPeer.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this WkyApiListPeerResultModel self) => JsonConvert.SerializeObject(self, WkyApiSharp.Service.Model.ListPeer.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ResultElementConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ResultElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ResultElement) || t == typeof(ResultElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new ResultElement { Integer = integerValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Peer>(reader);
                    return new ResultElement { Peer = objectValue };
            }
            throw new Exception("Cannot unmarshal type ResultElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ResultElement)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Peer != null)
            {
                serializer.Serialize(writer, value.Peer);
                return;
            }
            throw new Exception("Cannot marshal type ResultElement");
        }

        public static readonly ResultElementConverter Singleton = new ResultElementConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
