// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var wkyApiRemoteDownloadListResultModel = WkyApiRemoteDownloadListResultModel.FromJson(jsonString);

namespace WkyApiSharp.Service.Model.RemoteDownloadList
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class WkyApiRemoteDownloadListResultModel
    {
        [JsonProperty("recycleNum")]
        public long RecycleNum { get; set; }

        [JsonProperty("serverFailNum")]
        public long ServerFailNum { get; set; }

        [JsonProperty("sync")]
        public long Sync { get; set; }

        [JsonProperty("tasks")]
        public Task[] Tasks { get; set; }

        [JsonProperty("dlNum")]
        public long DlNum { get; set; }

        [JsonProperty("completeNum")]
        public long CompleteNum { get; set; }

        [JsonProperty("rtn")]
        public long Rtn { get; set; }

        [JsonProperty("msg")]
        public string Msg { get; set; }
    }

    public partial class Task
    {
        [JsonProperty("createTime")]
        public long CreateTime { get; set; }

        [JsonProperty("dcdnChannel")]
        public DcdnChannel DcdnChannel { get; set; }

        [JsonProperty("state")]
        public long State { get; set; }

        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("refer")]
        public string Refer { get; set; }

        [JsonProperty("progress")]
        public long Progress { get; set; }

        [JsonProperty("exist")]
        public long Exist { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }

        [JsonProperty("remainTime")]
        public long RemainTime { get; set; }

        [JsonProperty("size")]
        public string Size { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("failCode")]
        public long FailCode { get; set; }

        [JsonProperty("lixianChannel")]
        public LixianChannel LixianChannel { get; set; }

        [JsonProperty("from")]
        public long From { get; set; }

        [JsonProperty("subList")]
        public object[] SubList { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }

        [JsonProperty("speed")]
        public long Speed { get; set; }

        [JsonProperty("downTime")]
        public long DownTime { get; set; }

        [JsonProperty("vipChannel")]
        public VipChannel VipChannel { get; set; }

        [JsonProperty("completeTime")]
        public long CompleteTime { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }
    }

    public partial class DcdnChannel
    {
        [JsonProperty("dlBytes")]
        public long DlBytes { get; set; }

        [JsonProperty("available")]
        public long Available { get; set; }

        [JsonProperty("dlSize")]
        public string DlSize { get; set; }

        [JsonProperty("state")]
        public long State { get; set; }

        [JsonProperty("failCode")]
        public long FailCode { get; set; }

        [JsonProperty("speed")]
        public long Speed { get; set; }
    }

    public partial class LixianChannel
    {
        [JsonProperty("dlBytes")]
        public long DlBytes { get; set; }

        [JsonProperty("state")]
        public long State { get; set; }

        [JsonProperty("serverSpeed")]
        public long ServerSpeed { get; set; }

        [JsonProperty("dlSize")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long DlSize { get; set; }

        [JsonProperty("serverProgress")]
        public long ServerProgress { get; set; }

        [JsonProperty("failCode")]
        public long FailCode { get; set; }

        [JsonProperty("speed")]
        public long Speed { get; set; }
    }

    public partial class VipChannel
    {
        [JsonProperty("opened")]
        public long Opened { get; set; }

        [JsonProperty("dlBytes")]
        public long DlBytes { get; set; }

        [JsonProperty("available")]
        public long Available { get; set; }

        [JsonProperty("dlSize")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long DlSize { get; set; }

        [JsonProperty("speed")]
        public long Speed { get; set; }

        [JsonProperty("failCode")]
        public long FailCode { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }
    }

    public partial class WkyApiRemoteDownloadListResultModel
    {
        public static WkyApiRemoteDownloadListResultModel FromJson(string json) => JsonConvert.DeserializeObject<WkyApiRemoteDownloadListResultModel>(json, WkyApiSharp.Service.Model.RemoteDownloadList.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this WkyApiRemoteDownloadListResultModel self) => JsonConvert.SerializeObject(self, WkyApiSharp.Service.Model.RemoteDownloadList.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
